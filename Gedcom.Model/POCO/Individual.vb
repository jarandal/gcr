'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized

#If Silverlight Then
<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
System.Runtime.Serialization.DataContractAttribute(Name:="Individual", [Namespace]:="http://schemas.datacontract.org/2004/07/Sonda.BPM.Model",[IsReference]:=True)>  _
Partial Public Class Individual
#Else
<Serializable()>  _
<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
System.Runtime.Serialization.DataContractAttribute(Name:="Individual", [Namespace]:="http://schemas.datacontract.org/2004/07/Sonda.BPM.Model",[IsReference]:=True)>  _
Partial Public Class Individual
#End If
Implements System.ComponentModel.INotifyPropertyChanged
    #Region "Primitive Properties"
	Private _id As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property Id As String
        Get
            Return _id
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._id, value) <> True) Then
				_id = value
				Me.RaisePropertyChanged("Id")
            End If
		End Set
	End Property
	Private _firstName As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property FirstName As String
        Get
            Return _firstName
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._firstName, value) <> True) Then
				_firstName = value
				Me.RaisePropertyChanged("FirstName")
            End If
		End Set
	End Property
	Private _surName As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property SurName As String
        Get
            Return _surName
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._surName, value) <> True) Then
				_surName = value
				Me.RaisePropertyChanged("SurName")
            End If
		End Set
	End Property
	Private _sex As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property Sex As String
        Get
            Return _sex
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._sex, value) <> True) Then
				_sex = value
				Me.RaisePropertyChanged("Sex")
            End If
		End Set
	End Property
	Private _notes As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property Notes As String
        Get
            Return _notes
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._notes, value) <> True) Then
				_notes = value
				Me.RaisePropertyChanged("Notes")
            End If
		End Set
	End Property
	Private _notesSummary As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property NotesSummary As String
        Get
            Return _notesSummary
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._notesSummary, value) <> True) Then
				_notesSummary = value
				Me.RaisePropertyChanged("NotesSummary")
            End If
		End Set
	End Property
	Private _family_Id As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property Family_Id As String
        Get
            Return _family_Id
        End Get
        Set(ByVal value As String)
		If (Object.ReferenceEquals(Me._family_Id, value) <> True) Then
            Try
                _settingFK = True
                If Not Equals (_family_Id, value) Then
                    If Family IsNot Nothing AndAlso Not Equals(Family.Id, value) Then
                        Family = Nothing
                    End If
                    _family_Id = value
                End If
            Finally
                _settingFK = False
            End Try
		Me.RaisePropertyChanged("Family_Id")
        End If
        End Set
    End Property
    'Private _family_Id As String
	Private _birthDate As Nullable(Of Date)

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property BirthDate As Nullable(Of Date)
        Get
            Return _birthDate
        End Get
        Set(ByVal value As Nullable(Of Date))
			If (Object.ReferenceEquals(Me._birthDate, value) <> True) Then
				_birthDate = value
				Me.RaisePropertyChanged("BirthDate")
            End If
		End Set
	End Property
	Private _birthPlace As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property BirthPlace As String
        Get
            Return _birthPlace
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._birthPlace, value) <> True) Then
				_birthPlace = value
				Me.RaisePropertyChanged("BirthPlace")
            End If
		End Set
	End Property
	Private _deathDate As Nullable(Of Date)

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property DeathDate As Nullable(Of Date)
        Get
            Return _deathDate
        End Get
        Set(ByVal value As Nullable(Of Date))
			If (Object.ReferenceEquals(Me._deathDate, value) <> True) Then
				_deathDate = value
				Me.RaisePropertyChanged("DeathDate")
            End If
		End Set
	End Property
	Private _deathPlace As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property DeathPlace As String
        Get
            Return _deathPlace
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._deathPlace, value) <> True) Then
				_deathPlace = value
				Me.RaisePropertyChanged("DeathPlace")
            End If
		End Set
	End Property
	Private _dead As Nullable(Of Boolean)

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property Dead As Nullable(Of Boolean)
        Get
            Return _dead
        End Get
        Set(ByVal value As Nullable(Of Boolean))
			If (Object.ReferenceEquals(Me._dead, value) <> True) Then
				_dead = value
				Me.RaisePropertyChanged("Dead")
            End If
		End Set
	End Property
	Private _original_Id As String

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property Original_Id As String
        Get
            Return _original_Id
        End Get
        Set(ByVal value As String)
			If (Object.ReferenceEquals(Me._original_Id, value) <> True) Then
				_original_Id = value
				Me.RaisePropertyChanged("Original_Id")
            End If
		End Set
	End Property
	Private _distinguished As Nullable(Of Boolean)

	<System.Runtime.Serialization.DataMemberAttribute()> _
Public Overridable Property Distinguished As Nullable(Of Boolean)
        Get
            Return _distinguished
        End Get
        Set(ByVal value As Nullable(Of Boolean))
			If (Object.ReferenceEquals(Me._distinguished, value) <> True) Then
				_distinguished = value
				Me.RaisePropertyChanged("Distinguished")
            End If
		End Set
	End Property

    #End Region

    #Region "Navigation Properties"
	<System.Runtime.Serialization.DataMemberAttribute()> _
	Public Overridable Property Events As ObservableCollection(Of [Event])
        Get
            If _events Is Nothing Then
                Dim newCollection As New FixupCollection(Of [Event])
                AddHandler newCollection.CollectionChanged, AddressOf FixupEvents
                _events = newCollection
            End If
            Return _events
        End Get
        Set(ByVal value As ObservableCollection(Of [Event]))
            If _events IsNot value Then
                Dim previousValue As FixupCollection(Of [Event]) = TryCast(_events, FixupCollection(Of [Event]))
                If previousValue IsNot Nothing Then
                    RemoveHandler previousValue.CollectionChanged, AddressOf FixupEvents
                End If
                _events = value
                Dim newValue As FixupCollection(Of [Event]) = TryCast(value, FixupCollection(Of [Event]))
                If newValue IsNot Nothing Then
                    AddHandler newValue.CollectionChanged, AddressOf FixupEvents
                End If
            End If
        End Set
    End Property
    Private _events As ObservableCollection(Of [Event])
	<System.Runtime.Serialization.DataMemberAttribute()> _
    Public Overridable Property Family As Family
        Get
            Return _family
        End Get
        Set(ByVal value As Family)
            If _family IsNot value Then
                Dim previousValue As Family = _family
                _family = value
                FixupFamily(previousValue)
            End If
        End Set
    End Property
    Private _family As Family
	<System.Runtime.Serialization.DataMemberAttribute()> _
	Public Overridable Property Media As ObservableCollection(Of Media)
        Get
            If _media Is Nothing Then
                Dim newCollection As New FixupCollection(Of Media)
                AddHandler newCollection.CollectionChanged, AddressOf FixupMedia
                _media = newCollection
            End If
            Return _media
        End Get
        Set(ByVal value As ObservableCollection(Of Media))
            If _media IsNot value Then
                Dim previousValue As FixupCollection(Of Media) = TryCast(_media, FixupCollection(Of Media))
                If previousValue IsNot Nothing Then
                    RemoveHandler previousValue.CollectionChanged, AddressOf FixupMedia
                End If
                _media = value
                Dim newValue As FixupCollection(Of Media) = TryCast(value, FixupCollection(Of Media))
                If newValue IsNot Nothing Then
                    AddHandler newValue.CollectionChanged, AddressOf FixupMedia
                End If
            End If
        End Set
    End Property
    Private _media As ObservableCollection(Of Media)

    #End Region

    #Region "Association Fixup"
    Private _settingFK As Boolean = False

    Private Sub FixupFamily(ByVal previousValue As Family)
        If previousValue IsNot Nothing AndAlso previousValue.Childrens.Contains(Me) Then
            previousValue.Childrens.Remove(Me)
        End If
        If Family IsNot Nothing Then
            If Not Family.Childrens.Contains(Me) Then
                Family.Childrens.Add(Me)
            End If
            If Not Equals(Family_Id, Family.Id) Then
                Family_Id = Family.Id
            End If
        ElseIf Not _settingFK Then
            Family_Id = Nothing
        End If
    End Sub
    Private Sub FixupEvents(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If e.NewItems IsNot Nothing Then
            For Each item As [Event] In e.NewItems
                item.Individual = Me
            Next
        End If
        If e.OldItems IsNot Nothing Then
            For Each item As [Event] In e.OldItems
                If item.Individual Is Me Then
                    item.Individual = Nothing
                End If
            Next
        End If
    End Sub
    Private Sub FixupMedia(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If e.NewItems IsNot Nothing Then
            For Each item As Media In e.NewItems
                item.Individual = Me
            Next
        End If
        If e.OldItems IsNot Nothing Then
            For Each item As Media In e.OldItems
                If item.Individual Is Me Then
                    item.Individual = Nothing
                End If
            Next
        End If
    End Sub

    #End Region


    Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Sub RaisePropertyChanged(ByVal propertyName As String)
        Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
        If (Not (propertyChanged) Is Nothing) Then
            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End If
    End Sub

End Class
